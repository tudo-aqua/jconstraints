/*
 * Copyright 2015 United States Government, as represented by the Administrator
 *                of the National Aeronautics and Space Administration. All Rights Reserved.
 *           2017-2022 The jConstraints Authors
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tools.aqua.jconstraints.solvers.portfolio.sequential;

import static gov.nasa.jpf.constraints.expressions.LogicalOperator.AND;
import static gov.nasa.jpf.constraints.expressions.LogicalOperator.EQUIV;
import static gov.nasa.jpf.constraints.expressions.LogicalOperator.IMPLY;
import static gov.nasa.jpf.constraints.expressions.LogicalOperator.OR;
import static org.junit.jupiter.api.Assertions.assertEquals;

import gov.nasa.jpf.constraints.api.ConstraintSolver;
import gov.nasa.jpf.constraints.api.ConstraintSolver.Result;
import gov.nasa.jpf.constraints.api.SolverContext;
import gov.nasa.jpf.constraints.api.Valuation;
import gov.nasa.jpf.constraints.api.Variable;
import gov.nasa.jpf.constraints.expressions.Negation;
import gov.nasa.jpf.constraints.expressions.PropositionalCompound;
import gov.nasa.jpf.constraints.smtlibUtility.SMTProblem;
import gov.nasa.jpf.constraints.smtlibUtility.parser.SMTLIBParser;
import gov.nasa.jpf.constraints.smtlibUtility.parser.SMTLIBParserException;
import gov.nasa.jpf.constraints.types.BuiltinTypes;
import java.io.IOException;
import java.util.Properties;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import tools.aqua.jconstraints.solvers.AbstractTest;

public class UNSATCoreTest extends AbstractTest {

  @Test
  public void example1Test() {
    ConstraintSolver unsatCoreSolver = new SequentialMultiStrategySolver(new Properties());
    SolverContext ctx = unsatCoreSolver.createContext();

    Variable<Boolean> p = Variable.create(BuiltinTypes.BOOL, "p");
    Variable<Boolean> q = Variable.create(BuiltinTypes.BOOL, "q");
    Variable<Boolean> r = Variable.create(BuiltinTypes.BOOL, "r");
    Variable<Boolean> s = Variable.create(BuiltinTypes.BOOL, "s");

    PropositionalCompound pc2 = PropositionalCompound.create(r, IMPLY, s);
    PropositionalCompound pc3 =
        PropositionalCompound.create(s, IMPLY, PropositionalCompound.create(q, EQUIV, r));
    ctx.add(PropositionalCompound.create(p, OR, q));
    ctx.add(pc2);
    ctx.add(pc3);
    ctx.add(PropositionalCompound.create(r, OR, p));
    ctx.add(PropositionalCompound.create(r, OR, s));
    ctx.add(Negation.create(PropositionalCompound.create(r, AND, q)));
    ctx.add(Negation.create(PropositionalCompound.create(s, AND, p)));
    assertEquals(Result.UNSAT, ctx.solve(null));
  }

  @Test
  public void exampleTest() throws IOException, SMTLIBParserException {
    ConstraintSolver unsatCoreSolver = new SequentialMultiStrategySolver(new Properties());
    SolverContext ctx = unsatCoreSolver.createContext();
    String problem =
        "(declare-fun beginWord () String)\n"
            + "(declare-fun endWord () String)\n"
            + "\n"
            + "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not (not (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"l\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) endWord) 1 0) 0)))) (not (= (ite (= endWord endWord) 1 0) 0))) (not (not (= (ite (= (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) endWord) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) 0 (- 2 0)) \"t\") (str.substr (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) 3 (- (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 3))) (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"d\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1)))) 1 0) 0))) (not (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"d\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) endWord) 1 0) 0)))) (not (not (= (ite (= (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) endWord) 1 0) 0)))) (not (not (= (ite (= beginWord endWord) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"d\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) 0 (- 2 0)) \"t\") (str.substr (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) 3 (- (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 3)))) 1 0) 0))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"l\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1))) 0 (- 2 0)) \"t\") (str.substr (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1))) 3 (- (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 3)))) 1 0) 0))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1))) \"log\") 1 0) 0))) (not (= (ite (= (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1))) \"log\") 1 0) 0))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) \"dog\") 1 0) 0))) (not (= (ite (= (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1))) \"dog\") 1 0) 0))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len endWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"l\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) \"lot\") 1 0) 0))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"l\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) \"lot\") 1 0) 0))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"d\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) \"dot\") 1 0) 0))) (not (= (ite (= (str.++ (str.++ (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 0 (- 0 0)) \"d\") (str.substr (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) 1 (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1))) \"dot\") 1 0) 0))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (= (ite (= (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) \"hot\") 1 0) 0))) (not (= (ite (= (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2))) \"hot\") 1 0) 0))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (not (not (= (ite (<= (str.len beginWord) 0) 1 0) 0)))) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 2 0) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 3 0)) (>= (- (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 3) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 2 0) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 3 0)) (>= (- (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"d\") (str.substr endWord 1 (- (str.len endWord) 1)))) 3) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 2 0) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 3 0)) (>= (- (str.len (str.++ (str.++ (str.substr endWord 0 (- 0 0)) \"l\") (str.substr endWord 1 (- (str.len endWord) 1)))) 3) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 1 0)) (>= (- (str.len endWord) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 0 0) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 1 0)) (>= (- (str.len (str.++ (str.++ (str.substr beginWord 0 (- 1 0)) \"o\") (str.substr beginWord 2 (- (str.len beginWord) 2)))) 1) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)) (>= 0 0)) (>= (- 1 0) 0)) (>= 2 0)) (>= (- (str.len beginWord) 2) 0)))\n"
            + "\n"
            + "(check-sat)";
    SMTProblem pProblem = SMTLIBParser.parseSMTProgram(problem);
    ctx.add(pProblem.getAllAssertionsAsConjunction());

    Result res = ctx.solve(new Valuation());
    assertEquals(res, Result.UNSAT);
  }

  @Test
  public void example3Test() throws IOException, SMTLIBParserException {
    ConstraintSolver unsatCoreSolver = new SequentialMultiStrategySolver(new Properties());
    SolverContext ctx = unsatCoreSolver.createContext();
    String problem =
        "(set-logic QF_S)(declare-fun var0 () String)(declare-fun var1 () String)(declare-fun var2 () String)(declare-fun var3 () String)(declare-fun var4 () String)(declare-fun var5 () String)(declare-fun var6 () Int)(declare-fun var7 () Int)(declare-fun var8 () Int)(declare-fun var9 () Int)(declare-fun var10 () Int)(declare-fun var11 () Int)(declare-fun var12 () Bool)(declare-fun var13 () Bool)(declare-fun var14 () Bool)(declare-fun var15 () Bool)(declare-fun var16 () Bool)(declare-fun var17 () Bool)(assert (str.prefixof var4 \"m^deXxv^!\\\\\"))(assert (str.prefixof (str.substr (str.at var5 var7) (str.indexof var3 var1 var6) (str.indexof var2 var0 8)) (str.substr (str.replace var3 var1 \"dO+b\"\"1S|!*\") (str.indexof var1 var3 var6) (str.indexof var3 var1 var8))))(assert (> (str.len var4) (str.indexof var2 \"U}>Ub)`),%\" var8)))(assert (> (str.indexof var3 var2 var11) (str.indexof var3 var5 var8)))(assert (>= (str.indexof var4 var4 var8) (str.indexof var5 var1 var9)))(assert (not (str.in.re (str.replace var3 var3 var3) (re.* re.allchar))))(assert (str.contains (str.++ \"VF}W?d6;6>\" \"VF}W?d6;6>\") (str.substr var0 var7 var7)))(check-sat)";
    SMTProblem pProblem = SMTLIBParser.parseSMTProgram(problem);
    ctx.add(pProblem.getAllAssertionsAsConjunction());

    Result res = ctx.solve(new Valuation());
    assertEquals(res, Result.UNSAT);
  }
}
